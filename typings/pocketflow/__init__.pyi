from typing import Any, Dict, Generic, List, TypeVar, overload

T = TypeVar("T")
ActionType = str

class Node:
    """PocketFlow节点基类的类型存根"""

    def __init__(self) -> None: ...
    def set_params(self, params: Dict[str, Any]) -> None: ...
    def prep(self, shared: Dict[str, Any]) -> Any: ...
    def exec(self, prep_res: Any) -> Any: ...
    def post(self, shared: Dict[str, Any], prep_res: Any, exec_res: Any) -> ActionType: ...
    def run(self, shared: Dict[str, Any]) -> None: ...
    def __rshift__(self, other: "Node") -> "Node":
        """
        重载>>操作符，用于连接节点

        这个方法允许使用node_a >> node_b语法来连接节点
        """
        ...

class Flow(Node):
    """PocketFlow流程的类型存根"""

    @overload
    def __init__(self, *, start: Node) -> None: ...
    @overload
    def __init__(self, *, start: List[Node]) -> None: ...
    def add_transition(self, from_node: Node, to_node: Node, action: ActionType = "default") -> None: ...
    def run(self, shared: Dict[str, Any]) -> None: ...

class BatchNode(Node, Generic[T]):
    """批处理节点的类型存根"""

    def prep(self, shared: Dict[str, Any]) -> List[T]: ...
    def exec(self, item: T) -> Any: ...
    def post(self, shared: Dict[str, Any], prep_res: List[T], exec_res_list: List[Any]) -> ActionType: ...

class BatchFlow(Node, Generic[T]):
    """批处理流程的类型存根"""

    def __init__(self, *, start: Node) -> None: ...
    def prep(self, shared: Dict[str, Any]) -> List[Dict[str, Any]]: ...
    def post(self, shared: Dict[str, Any], prep_res: List[Dict[str, Any]], exec_res: None) -> ActionType: ...

class AsyncNode(Node):
    """异步节点的类型存根"""

    async def prep_async(self, shared: Dict[str, Any]) -> Any: ...
    async def exec_async(self, prep_res: Any) -> Any: ...
    async def post_async(self, shared: Dict[str, Any], prep_res: Any, exec_res: Any) -> ActionType: ...

class AsyncFlow(Node):
    """异步流程的类型存根"""

    @overload
    def __init__(self, *, start: AsyncNode) -> None: ...
    @overload
    def __init__(self, *, start: List[AsyncNode]) -> None: ...
    async def run_async(self, shared: Dict[str, Any]) -> None: ...
