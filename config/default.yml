# 默认配置文件

# 应用程序配置
app:
   name: "Codebase Knowledge Builder"
   version: "0.1.0"
   debug: false # 设置为true可以启用调试模式，显示更详细的日志信息

# LLM 配置
llm:
   # 模型配置 - 应从环境变量中获取，这里不设置默认值
   # 格式: "provider/model"，例如: "openai/gpt-4", "anthropic/claude-3-opus-20240229"
   # 对于 OpenRouter，格式应为: "openrouter/provider/model"，例如: "openrouter/anthropic/claude-3-opus-20240229"
   model: ""
   # Token 限制配置（两个参数共同控制LLM的上下文窗口使用）
   max_tokens: 4000 # 控制LLM输出的最大token数
   # max_input_tokens: 25000 # 控制输入到LLM的最大token数
   # 注意: max_input_tokens + max_tokens 的总和不应超过模型的最大上下文长度
   temperature: 0.7
   # 缓存配置
   cache_enabled: true # 是否启用缓存
   cache_ttl: 86400 # 缓存有效期，单位：秒（86400秒 = 24小时）
   cache_dir: ".cache/llm" # 缓存目录

   # OpenAI 配置
   openai:
      base_url: "https://api.openai.com/v1"

   # OpenRouter 配置
   openrouter:
      base_url: "https://openrouter.ai/api/v1"
      app_url: "http://localhost:3000"
      app_name: "Codebase Knowledge Builder"

   # 阿里百炼配置
   alibaba:
      base_url: "https://dashscope.aliyuncs.com/api/v1"

   # 火山引擎配置
   volcengine:
      base_url: "https://api.volcengine.com/ml/api/v1/services"
      service_id: "" # 需要在环境变量中设置

   # 硅基流动配置
   moonshot:
      base_url: "https://api.moonshot.cn/v1"

# Langfuse 配置
langfuse:
   enabled: true
   host: "https://cloud.langfuse.com"
   project_name: "codebase-knowledge-builder"

# Git 仓库配置
git:
   default_branch: "main"
   cache_ttl: 86400 # 24小时，单位：秒
   max_commits: 100

# 节点配置
nodes:
   input:
      default_repo_url: ""
      default_branch: ""
      default_output_dir: "docs_output"
      default_language: "zh"

   prepare_repo:
      cache_ttl: 86400 # 24小时，单位：秒
      force_clone: false

   analyze_history:
      max_commits: 100
      include_file_history: true
      analyze_contributors: true
      summary_prompt_template: |
         你是一个代码库历史分析专家。请分析以下 Git 提交历史，并提供一个全面的总结。

         提交历史:
         {commit_history}

         贡献者信息:
         {contributors}

         请提供以下内容:
         1. 代码库的总体发展历程和主要里程碑
         2. 主要贡献者及其贡献领域
         3. 代码库的主要模块和组件（基于提交信息推断）
         4. 代码库的开发模式和协作方式
         5. 任何其他有价值的见解

         请以 Markdown 格式输出，使用适当的标题、列表和强调。

   parse_code_batch:
      max_files: 1000
      batch_size: 100
      ignore_patterns:
         - ".git"
         - ".vscode"
         - ".idea"
         - "__pycache__"
         - "node_modules"
         - "venv"
         - ".env"
         - ".venv"
         - ".DS_Store"
         - ".pytest_cache"
         - ".coverage"
         - "htmlcov"
         - "dist"
         - "build"
         - ".cache"
      binary_extensions:
         - "png"
         - "jpg"
         - "jpeg"
         - "gif"
         - "bmp"
         - "ico"
         - "svg"
         - "pdf"
         - "doc"
         - "docx"
         - "ppt"
         - "pptx"
         - "xls"
         - "xlsx"
         - "zip"
         - "tar"
         - "gz"
         - "rar"
         - "7z"
         - "exe"
         - "dll"
         - "so"
         - "dylib"
         - "pyc"
         - "pyo"
         - "pyd"
         - "class"
         - "o"
         - "obj"
         - "bin"
         - "dat"

   # AI理解核心模块节点配置
   # 该节点负责分析代码库结构，识别核心模块和它们之间的关系
   ai_understand_core_modules:
      retry_count: 3 # 重试次数
      quality_threshold: 0.7 # 质量阈值，低于此值的结果将被标记为需要改进
      language_detection: true # 是否检测语言
      terminology_extraction: true # 是否提取术语
      # 提示模板 - 用于指导LLM分析代码库结构并识别核心模块
      core_modules_prompt_template: |
         你是一个代码库分析专家。请分析以下代码库结构，并识别核心模块和它们之间的关系。

         代码库结构:
         {code_structure}

         依赖关系:
         {dependencies}

         请提供以下内容:
         1. 核心模块列表，每个模块包括:
            - 模块名称
            - 模块路径
            - 模块功能描述
            - 模块重要性评分 (1-10)
            - 模块依赖关系
         2. 整体架构概述
         3. 模块之间的关系 (请以列表形式给出，每一项格式为: '模块A -> 模块B'，表示模块A调用或依赖模块B。例如: ["requests.api -> requests.sessions", "requests.sessions -> requests.adapters"]):

         重要提示：
         1. 请确保你的分析是基于{repo_name}的实际代码，而不是生成通用示例项目。
         2. 不要使用"unknown"作为项目名称，应该使用"{repo_name}"。
         3. 不要生成虚构的模块名称，应该使用代码库中实际存在的模块名称。
         4. 不要生成虚构的API，应该使用代码库中实际存在的API。
         5. 如果你不确定某个信息，请基于提供的代码库结构进行合理推断，而不是编造。
         6. 请使用{repo_name}的实际模块名称和文件路径，例如，如果是requests库，应该使用requests.api, requests.sessions等实际存在的模块。

   prepare_rag_data:
      max_chunk_size: 1000
      chunk_overlap: 200
      max_files: 100
      exclude_extensions:
         - "jpg"
         - "jpeg"
         - "png"
         - "gif"
         - "svg"
         - "ico"
         - "pdf"
         - "zip"
         - "tar"
         - "gz"
      include_extensions:
         - "py"
         - "js"
         - "ts"
         - "java"
         - "c"
         - "cpp"
         - "h"
         - "hpp"
         - "cs"
         - "go"
         - "rs"
         - "md"
         - "txt"
         - "json"
         - "yml"
         - "yaml"
         - "toml"

   # API文档生成节点配置
   # 该节点负责生成代码库的API文档
   generate_api_docs:
      retry_count: 3 # 重试次数
      quality_threshold: 0.7 # 质量阈值，低于此值的结果将被标记为需要改进
      output_format: "markdown" # 输出格式
      # 提示模板 - 用于指导LLM生成API文档
      api_docs_prompt_template: |
         你是一个专业的API文档专家，擅长创建清晰、实用的API参考文档。请根据以下信息生成一份高质量的API文档。

         你正在分析的是{repo_name}代码库。请确保你的分析基于实际的{repo_name}代码，而不是生成通用示例项目。

         代码库结构:
         {code_structure}

         核心模块:
         {core_modules}

         ## 📚 API文档生成要求

         请按照以下结构生成文档，确保内容准确、完整、易于使用：

         ### 1. 🎯 API概述
         - **项目简介**: 简要介绍{repo_name}项目的核心功能和价值
         - **API设计理念**: 说明API的设计原则和架构思想
         - **快速开始**: 提供最简单的使用示例，让用户快速上手
         - **版本信息**: 当前API版本和兼容性说明

         ### 2. 🏗️ API架构
         - **整体架构**: 使用Mermaid图表展示API的整体架构
         - **核心组件**: 列出主要的API组件和它们的职责
         - **数据流**: 展示典型的API调用流程

         ```mermaid
         graph TD
             A[客户端] --> B[API入口]
             B --> C[核心处理]
             C --> D[数据返回]
         ```

         **重要：Mermaid图表语法要求**
         - 节点标识符只能使用字母、数字和下划线，不能包含特殊符号如括号()、方括号[]、引号等
         - 节点标签（方括号内的文本）应避免使用特殊符号，如果必须使用中文，请确保不包含括号等特殊字符
         - 正确示例：A[客户端] --> B[API入口]
         - 错误示例：A[客户端(Client)] --> B[API入口 (requests.api)]

         ### 3. 📖 核心API详解
         按功能模块组织API，对每个API提供：

         #### 3.1 [功能模块名称] 📋
         - **模块概述**: 该模块的主要功能和用途
         - **核心API列表**: 该模块包含的主要API

         对于每个API，提供：
         - **API名称**: `function_name()` 或 `ClassName.method_name()`
         - **功能描述**: 清晰说明API的作用和使用场景
         - **参数详解**:
           | 参数名 | 类型 | 必需 | 默认值 | 描述 |
           |--------|------|------|--------|------|
           | param1 | str  | 是   | -      | 参数描述 |
         - **返回值**: 详细说明返回值的类型、结构和含义
         - **异常处理**: 列出可能的异常和错误码
         - **使用示例**: 提供完整的代码示例

         ```python
         # 基础用法示例
         result = api_function(param1="value")
         print(result)

         # 进阶用法示例
         try:
             result = api_function(param1="value", param2=True)
             # 处理结果
         except SpecificException as e:
             # 错误处理
         ```

         ### 4. 🔧 使用指南
         - **安装配置**: 如何安装和配置
         - **认证授权**: 如果需要，说明认证方式
         - **最佳实践**: 推荐的使用模式和技巧
         - **性能优化**: 性能相关的建议

         ### 5. 📊 API分类索引
         按不同维度对API进行分类：

         #### 按功能分类
         - **数据处理类**: 列出相关API
         - **配置管理类**: 列出相关API
         - **工具辅助类**: 列出相关API

         #### 按使用频率分类
         - **常用API**: 最常使用的核心API
         - **进阶API**: 高级功能API
         - **工具API**: 辅助工具API

         ### 6. ⚠️ 错误处理
         - **错误码表**: 完整的错误码列表和含义
         - **异常类型**: 各种异常的说明和处理方法
         - **调试技巧**: 常见问题的排查方法
         - **故障排除**: 典型问题的解决方案

         ### 7. 🔄 版本兼容性
         - **版本历史**: 主要版本的变更记录
         - **迁移指南**: 版本升级的迁移说明
         - **废弃API**: 已废弃的API和替代方案
         - **向后兼容**: 兼容性保证和限制

         ## 🎯 质量要求

         1. **准确性**: 确保所有API信息准确无误，基于实际代码
         2. **完整性**: 覆盖所有公共API，不遗漏重要功能
         3. **实用性**: 提供可运行的代码示例
         4. **清晰性**: 使用简洁明了的语言描述
         5. **结构化**: 保持良好的文档结构和导航
         6. **可视化**: 适当使用图表和表格增强理解

         请确保生成的文档：
         - 使用适当的emoji表情符号增强可读性 🎨
         - 代码示例使用正确的语法高亮
         - 表格格式整齐，信息完整
         - 包含必要的Mermaid图表
         - 提供清晰的导航结构

         **重要提示**:
         1. 请确保你的分析是基于{repo_name}的实际代码，而不是生成通用示例项目
         2. 不要使用"unknown"作为项目名称，应该使用"{repo_name}"
         3. 不要生成虚构的API，应该使用代码库中实际存在的API
         4. 必须包含至少1个Mermaid图表，这是强制要求！

   generate_overall_architecture:
      retry_count: 3
      quality_threshold: 0.7
      output_format: "markdown"
      architecture_prompt_template: |
         你是一个代码库架构专家。请根据以下信息生成一个全面的代码库架构文档。

         你正在分析的是{repo_name}代码库。请确保你的分析基于实际的{repo_name}代码，而不是生成通用示例项目。

         代码库结构:
         {code_structure}

         核心模块:
         {core_modules}

         历史分析:
         {history_analysis}

         请提供以下内容:
         1. 代码库概述
            - 项目名称({repo_name})和简介
            - 主要功能和用途
            - 技术栈概述
         2. 系统架构
            - 高层架构图（必须使用Mermaid图表表示）
            - 主要组件和它们的职责
            - 组件之间的交互流程（使用Mermaid时序图或流程图）
         3. 核心模块详解
            - 每个核心模块的功能和职责
            - 模块之间的依赖关系（使用Mermaid流程图表示）
            - 关键接口和数据流（使用Mermaid图表表示）
         4. 设计模式和原则
            - 使用的主要设计模式（使用Mermaid图表展示至少一个关键设计模式）
            - 代码组织原则
            - 最佳实践
         5. 部署架构（如果适用）
            - 部署环境（使用Mermaid图表表示）
            - 部署流程（使用Mermaid时序图表示）
            - 扩展性考虑

         请以 Markdown 格式输出，使用适当的标题、列表、表格和代码块。
         使用表情符号使文档更加生动，例如在标题前使用适当的表情符号。

         必须包含至少4个Mermaid图表，用于可视化：
         1. 系统高层架构
         2. 模块依赖关系
         3. 关键数据流或处理流程
         4. 一个设计模式实现或部署架构

         Mermaid图表示例：

         ```mermaid
         graph TD
             A[Module A] --> B[Module B]
             A --> C[Module C]
             B --> D[Module D]
             C --> D
         ```

         ```mermaid
         sequenceDiagram
             participant User
             participant API
             participant Database
             User->>API: Request Data
             API->>Database: Query Data
             Database-->>API: Return Result
             API-->>User: Response
         ```

         **重要：Mermaid图表语法要求**
         - 节点标识符只能使用字母、数字和下划线，不能包含特殊符号
         - 节点标签（方括号内的文本）应避免使用括号()、引号""等特殊字符
         - 如果需要表示模块名称，使用简洁的中文或英文描述，不要包含代码中的完整路径或特殊符号
         - 正确示例：A[用户模块] --> B[API模块]
         - 错误示例：A[用户模块(user.py)] --> B[API模块 (api.requests)]

         ```mermaid
         classDiagram
             class CoreClass {
                 +property1
                 +property2
                 +method1()
                 +method2()
             }
             class SubClass1
             class SubClass2
             CoreClass <|-- SubClass1
             CoreClass <|-- SubClass2
         ```

         重要提示：
         1. 请确保你的分析是基于{repo_name}的实际代码，而不是生成通用示例项目。
         2. 不要使用"unknown"作为项目名称，应该使用"{repo_name}"。
         3. 不要生成虚构的模块名称，应该使用代码库中实际存在的模块名称。
         4. 不要生成虚构的API，应该使用代码库中实际存在的API。
         5. 如果你不确定某个信息，请基于提供的代码库结构和历史分析进行合理推断，而不是编造。
         6. 必须包含至少4个Mermaid图表，这是强制要求！文档中必须包含Mermaid图表来可视化系统架构和模块依赖关系。

   generate_timeline:
      retry_count: 3
      quality_threshold: 0.7
      output_format: "markdown"
      timeline_prompt_template: |
         你是一个代码库历史分析专家。请根据以下信息生成一个全面的代码库演变时间线文档。

         历史分析:
         {history_analysis}

         请提供以下内容:
         1. 项目演变概述
            - 项目的起源和发展历程
            - 主要里程碑和转折点
         2. 关键版本时间线
            - 按时间顺序列出关键版本
            - 每个版本的主要变化和贡献
         3. 功能演进
            - 主要功能的引入和发展
            - 技术栈的变化和升级
         4. 贡献者分析
            - 主要贡献者及其贡献领域
            - 贡献模式和团队协作方式
         5. 未来发展趋势
            - 基于历史数据的发展趋势预测
            - 潜在的改进方向

         请以 Markdown 格式输出，使用适当的标题、列表、表格和时间线图表。
         使用表情符号使文档更加生动，例如在标题前使用适当的表情符号。

         必须使用 Mermaid 语法创建至少两个图表：
         1. 一个时间线图表，展示项目的关键里程碑
         2. 一个贡献者活跃度或功能演进图表

         Mermaid时间线图表示例：

         ```mermaid
         timeline
             title 项目发展时间线
             section 2011
                 创建项目 : 初始版本发布
             section 2012
                 添加会话支持 : 增强功能
             section 2013
                 重构核心模块 : 性能优化
             section 2014
                 2.0版本发布 : 重大更新
                 增加异步支持 : 新特性
             section 2015
                 安全更新 : 修复漏洞
         ```

         Mermaid饼图示例（用于展示贡献者分布）：

         ```mermaid
         pie
             title Contributors Code Contribution
             "Developer A" : 40
             "Developer B" : 30
             "Developer C" : 20
             "Others" : 10
         ```

         Mermaid流程图示例（用于展示功能演进）：

         ```mermaid
         graph TD
             A[Initial Version] --> B[Basic Features]
             B --> C[Advanced Features]
             B --> D[Security Enhancement]
             C --> E[Performance Optimization]
             D --> E
             E --> F[Current Version]
         ```

         重要提示：必须包含至少两个Mermaid图表，这是强制要求！

   generate_dependency:
      retry_count: 3
      quality_threshold: 0.7
      output_format: "markdown"
      dependency_prompt_template: |
         你是一个代码库依赖分析专家。请根据以下信息生成一个全面的代码库依赖关系文档。

         你正在分析的是{repo_name}代码库。请确保你的分析基于实际的{repo_name}代码，而不是生成通用示例项目。

         代码库结构:
         {code_structure}

         核心模块:
         {core_modules}

         请提供以下内容:
         1. 依赖概述
            - 主要依赖类型和分类
            - 依赖管理策略
         2. 内部依赖关系
            - 模块间的依赖关系（使用Mermaid图表展示）
            - 关键组件的依赖图（使用Mermaid图表展示）
         3. 外部依赖分析
            - 主要第三方依赖（使用Mermaid图表或表格展示）
            - 版本要求和兼容性
         4. 依赖优化建议
            - 潜在的循环依赖问题（如有，使用Mermaid图表展示）
            - 依赖简化和优化方向
         5. 依赖管理最佳实践
            - 推荐的依赖管理方法
            - 版本控制和更新策略

         请以 Markdown 格式输出，使用适当的标题、列表、表格和依赖图。
         使用表情符号使文档更加生动，例如在标题前使用适当的表情符号。

         必须使用 Mermaid 语法创建至少两个图表：
         1. 一个模块间依赖关系图
         2. 一个外部依赖关系图或依赖层次结构图

         Mermaid依赖关系图示例：

         ```mermaid
         graph TD
             A[Core Module] --> B[Sub Module 1]
             A --> C[Sub Module 2]
             B --> D[Utils Module]
             C --> D
             A --> E[External Dep 1]
             B --> F[External Dep 2]
         ```

         **重要：Mermaid图表语法要求**
         - 节点标识符只能使用字母、数字和下划线，不能包含特殊符号
         - 节点标签应避免使用括号()、引号""等特殊字符
         - 模块名称使用简洁描述，不要包含完整的包路径或特殊符号
         - 正确示例：A[核心模块] --> B[工具模块]
         - 错误示例：A[核心模块(core.py)] --> B[工具模块 (utils.requests)]

         Mermaid类图示例（用于展示依赖关系）：

         ```mermaid
         classDiagram
             class CoreModule {
                 +dependency1
                 +dependency2
             }
             class SubModule1
             class SubModule2
             class ExternalDep
             CoreModule --> SubModule1
             CoreModule --> SubModule2
             SubModule1 --> ExternalDep
         ```

         重要提示：
         1. 请确保你的分析是基于{repo_name}的实际代码，而不是生成通用示例项目。
         2. 不要使用"unknown"作为项目名称，应该使用"{repo_name}"。
         3. 不要生成虚构的模块名称，应该使用代码库中实际存在的模块名称。
         4. 必须包含至少两个Mermaid图表，这是强制要求！

   generate_glossary:
      retry_count: 3
      quality_threshold: 0.7
      output_format: "markdown"
      glossary_prompt_template: |
         你是一个代码库术语专家。请根据以下信息生成一个全面的代码库术语表文档。

         你正在分析的是{repo_name}代码库。请确保你的分析基于实际的{repo_name}代码，而不是生成通用示例项目。

         代码库结构:
         {code_structure}

         核心模块:
         {core_modules}

         历史分析:
         {history_analysis}

         请提供以下内容:
         1. 术语表概述
            - 术语表的目的和使用方法
            - 术语分类和组织方式
         2. 项目特定术语
            - 项目中使用的特定术语和概念
            - 每个术语的定义和用法
         3. 技术术语
            - 项目中使用的技术术语
            - 每个术语的定义和相关技术背景
         4. 缩写和首字母缩略词
            - 项目中使用的缩写和首字母缩略词
            - 每个缩写的全称和含义
         5. 术语关系
            - 术语之间的关系和层次结构（使用Mermaid图表展示）
            - 相关术语的交叉引用

         请以 Markdown 格式输出，使用适当的标题、列表和表格。
         使用表情符号使文档更加生动，例如在标题前使用适当的表情符号。
         术语表应按字母顺序排列，便于查找。

         必须使用 Mermaid 语法创建至少一个图表，展示关键术语之间的关系或层次结构。例如：

         ```mermaid
         graph TD
             A[Core Concept] --> B[Sub Concept 1]
             A --> C[Sub Concept 2]
             B --> D[Related Term 1]
             C --> E[Related Term 2]
         ```

         或者使用思维导图形式：

         ```mermaid
         mindmap
             root((核心概念))
               术语分类1
                 子术语1.1
                 子术语1.2
               术语分类2
                 子术语2.1
                 子术语2.2
         ```

         **重要：Mermaid图表语法要求**
         - 节点标识符只能使用字母、数字和下划线，不能包含特殊符号
         - 节点标签应避免使用括号()、引号""等特殊字符
         - 术语名称使用简洁描述，避免包含特殊符号
         - 正确示例：A[核心概念] --> B[子概念]
         - 错误示例：A[核心概念(Core)] --> B[子概念 (Sub-concept)]

         重要提示：
         1. 请确保你的分析是基于{repo_name}的实际代码，而不是生成通用示例项目。
         2. 不要使用"unknown"作为项目名称，应该使用"{repo_name}"。
         3. 不要生成虚构的术语，应该使用代码库中实际存在的术语。
         4. 必须包含至少一个Mermaid图表，这是强制要求！

   generate_quick_look:
      retry_count: 3
      quality_threshold: 0.7
      output_format: "markdown"
      quick_look_prompt_template: |
         你是一个代码库分析专家。请根据以下信息生成一个简洁的代码库速览文档，让读者能在5分钟内了解这个代码库的核心内容。

         你正在分析的是{repo_name}代码库。请确保你的分析基于实际的{repo_name}代码，而不是生成通用示例项目。

         代码库结构:
         {code_structure}

         核心模块:
         {core_modules}

         历史分析:
         {history_analysis}

         请提供以下内容:
         1. 项目概述 (1-2段)
            - 项目的主要目的和功能
            - 核心价值和应用场景
         2. 关键特性 (5-7个要点)
            - 最重要的功能和特性
            - 每个特性的简短描述
         3. 技术栈概览 (简短列表)
            - 主要编程语言和框架
            - 关键依赖和工具
         4. 架构速览 (简短描述)
            - 核心架构模式（使用Mermaid图表展示）
            - 主要组件及其关系
         5. 快速上手指南 (3-5个步骤)
            - 如何快速开始使用
            - 基本使用示例（使用代码块展示）

         请以 Markdown 格式输出，使用适当的标题、列表和强调。
         使用表情符号使文档更加生动，例如在标题前使用适当的表情符号。
         整个文档应该简洁明了，不超过500字。

         必须使用 Mermaid 语法创建至少一个图表，展示项目的核心架构或主要组件关系。例如：

         ```mermaid
         graph LR
             A[用户] --> B[API接口]
             B --> C[核心功能]
             C --> D[数据存储]
         ```

         或者使用流程图展示基本使用流程：

         ```mermaid
         flowchart TD
             A[开始] --> B[安装]
             B --> C[配置]
             C --> D[使用]
             D --> E[结束]
         ```

         **重要：Mermaid图表语法要求**
         - 节点标识符只能使用字母、数字和下划线，不能包含特殊符号
         - 节点标签应避免使用括号()、引号""等特殊字符
         - 组件名称使用简洁描述，避免包含特殊符号
         - 正确示例：A[用户] --> B[API接口]
         - 错误示例：A[用户(User)] --> B[API接口 (api.interface)]

         重要提示：
         1. 请确保你的分析是基于{repo_name}的实际代码，而不是生成通用示例项目。
         2. 不要使用"unknown"作为项目名称，应该使用"{repo_name}"。
         3. 不要生成虚构的功能，应该使用代码库中实际存在的功能。
         4. 必须包含至少一个Mermaid图表，这是强制要求！

   # 内容质量检查节点配置
   # 该节点负责检查生成的文档内容质量，并提供改进建议
   # 注意：该节点不会直接修复文档，而是提供改进建议，由内容生成节点根据建议重新生成
   content_quality_check:
      retry_count: 2 # 重试次数
      quality_threshold: 0.7 # 质量阈值，低于此值的文档将被标记为需要改进
      auto_fix: true # 是否启用自动修复（通过传递改进建议给内容生成节点）
      check_aspects: # 检查方面
         - "completeness" # 完整性：文档是否涵盖了所有必要的信息
         - "accuracy" # 准确性：文档中的信息是否准确
         - "readability" # 可读性：文档是否易于阅读和理解
         - "formatting" # 格式化：文档的格式是否一致和专业
         - "visualization" # 可视化：文档是否包含必要的图表
         - "educational_value" # 教学价值：文档是否具有良好的教学效果
         - "practical_utility" # 实用性：文档是否提供实用的信息和示例
      # 提示模板 - 注意：该模板应只提供改进建议，不提供修复后的完整内容
      quality_check_prompt_template: |
         你是一个专业的技术文档质量评估专家，擅长评估文档的教学效果和实用价值。请对以下文档进行全面的质量评估。

         文档内容:
         {content}

         ## 📋 评估标准

         请从以下7个维度对文档进行评估，每个维度给出1-10分的评分：

         ### 1. 📚 完整性 (Completeness)
         - 文档是否涵盖了主题的所有重要方面？
         - 是否有明显的信息缺失或遗漏？
         - 关键概念是否都有详细说明？
         - 是否提供了足够的背景信息？

         ### 2. ✅ 准确性 (Accuracy)
         - 技术信息是否准确无误？
         - 代码示例是否正确可运行？
         - 是否有误导性或错误的表述？
         - 术语使用是否准确一致？

         ### 3. 📖 可读性 (Readability)
         - 语言表达是否清晰易懂？
         - 逻辑结构是否合理？
         - 段落组织是否恰当？
         - 是否避免了过于技术化的表述？

         ### 4. 🎨 格式化 (Formatting)
         - Markdown语法使用是否正确？
         - 标题层级是否合理？
         - 代码块、表格、列表格式是否规范？
         - 整体排版是否美观一致？

         ### 5. 📊 可视化 (Visualization)
         - 是否包含必要的图表和示意图？
         - 图表是否清晰易懂？
         - 是否使用了Mermaid等工具增强理解？
         - 视觉元素是否有助于理解内容？

         ### 6. 🎓 教学价值 (Educational Value)
         - 文档是否具有良好的教学效果？
         - 是否从简单到复杂循序渐进？
         - 概念解释是否深入浅出？
         - 是否有助于读者理解和掌握知识？

         ### 7. 🔧 实用性 (Practical Utility)
         - 是否提供了实用的代码示例？
         - 示例是否贴近实际使用场景？
         - 是否包含最佳实践和注意事项？
         - 读者是否能直接应用文档中的知识？

         ## 📝 评估输出格式

         请按以下格式提供评估结果：

         ### 评估结果
         - **完整性**: [1-10分] - [具体评价和发现的问题]
         - **准确性**: [1-10分] - [具体评价和发现的问题]
         - **可读性**: [1-10分] - [具体评价和发现的问题]
         - **格式化**: [1-10分] - [具体评价和发现的问题]
         - **可视化**: [1-10分] - [具体评价和发现的问题]
         - **教学价值**: [1-10分] - [具体评价和发现的问题]
         - **实用性**: [1-10分] - [具体评价和发现的问题]
         - **总体评分**: [1-10分]

         ### 🔍 主要问题识别
         1. **结构问题**: [列出文档结构方面的问题]
         2. **内容问题**: [列出内容方面的问题]
         3. **格式问题**: [列出格式方面的问题]
         4. **可视化问题**: [列出图表和可视化方面的问题]

         ### 💡 具体改进建议
         1. **内容补充**: [需要补充哪些内容]
         2. **结构优化**: [如何改进文档结构]
         3. **表达改进**: [如何改进语言表达]
         4. **格式调整**: [需要调整的格式问题]
         5. **可视化增强**: [需要添加或改进的图表]
         6. **示例改进**: [如何改进代码示例]

         ### 🎯 优先级建议
         - **高优先级**: [最重要的改进项目]
         - **中优先级**: [次要的改进项目]
         - **低优先级**: [可选的改进项目]

         ## ⚠️ 评估要求

         1. **客观公正**: 基于文档实际内容进行评估，不带主观偏见
         2. **具体明确**: 提供具体的问题描述和改进建议
         3. **可操作性**: 确保改进建议具有可操作性
         4. **教学导向**: 重点关注文档的教学效果和实用价值
         5. **建设性**: 提供建设性的改进建议，而非单纯的批评

         **重要提示**: 请只提供评估和改进建议，不要提供修复后的完整文档内容。你的建议将用于指导文档的重新生成。

   generate_module_details:
      retry_count: 3
      quality_threshold: 0.7
      output_format: "markdown"
      max_modules_per_batch: 5
      module_details_prompt_template: |
         你是一个专业的技术文档专家，擅长将复杂的代码转化为清晰易懂的教程文档。请为以下模块生成一份高质量的详细文档。

         模块信息:
         {module_info}

         代码内容:
         {code_content}

         ## 📝 文档生成要求

         请按照以下结构生成文档，确保内容清晰、逻辑性强、易于理解：

         ### 1. 📋 模块概述
         - **模块名称**: 明确标注模块名称和完整路径
         - **核心功能**: 用1-2句话概括模块的主要功能和价值
         - **架构角色**: 说明该模块在整个系统中的定位和重要性
         - **适用场景**: 描述什么情况下会使用这个模块

         ### 2. 🏗️ 架构设计
         - **设计思路**: 解释模块的设计理念和架构思想
         - **核心组件**: 列出模块中的主要类、函数和组件
         - **数据流向**: 如果适用，使用Mermaid图表展示数据流或调用关系

         ### 3. 🔧 详细API文档
         对于每个公共类和函数，提供：
         - **功能描述**: 清晰说明其作用和用途
         - **参数说明**: 详细列出所有参数，包括类型、默认值、是否必需
         - **返回值**: 说明返回值的类型和含义
         - **异常处理**: 列出可能抛出的异常和处理方式
         - **使用注意**: 重要的使用注意事项和限制

         ### 4. 💡 实用示例
         - **基础用法**: 提供最简单的使用示例
         - **进阶用法**: 展示更复杂的使用场景
         - **最佳实践**: 推荐的使用模式和技巧
         - **常见错误**: 列出常见的使用错误和避免方法

         ### 5. 🔗 依赖关系
         - **上游依赖**: 该模块依赖的其他模块和外部库
         - **下游使用**: 哪些模块或组件使用了该模块
         - **依赖图**: 如果关系复杂，使用Mermaid图表展示

         ### 6. ⚠️ 注意事项与最佳实践
         - **性能考虑**: 使用时的性能注意事项
         - **安全考虑**: 安全相关的注意事项
         - **兼容性**: 版本兼容性和向后兼容性说明
         - **调试技巧**: 常见问题的调试方法

         ## 🎯 质量要求

         1. **清晰性**: 使用简洁明了的语言，避免过于技术化的表述
         2. **完整性**: 覆盖模块的所有重要方面，不遗漏关键信息
         3. **实用性**: 提供实际可用的代码示例，确保示例能够运行
         4. **结构化**: 使用清晰的标题层级和列表结构
         5. **可视化**: 适当使用Mermaid图表增强理解
         6. **一致性**: 保持术语和格式的一致性

         请确保生成的文档：
         - 使用适当的emoji表情符号增强可读性 🎨
         - 代码块使用正确的语法高亮
         - 表格格式整齐，便于阅读
         - 链接格式正确，便于导航
         - 内容层次分明，逻辑清晰

         **重要提示**: 请基于实际的代码内容生成文档，不要编造不存在的功能或API。如果某些信息无法从代码中获取，请明确说明。

   # 模块质量检查节点配置
   # 该节点负责检查生成的模块文档质量，并提供改进建议
   # 注意：该节点不会直接修复文档，而是提供改进建议，由内容生成节点根据建议重新生成
   module_quality_check:
      retry_count: 2 # 重试次数
      quality_threshold: 0.7 # 质量阈值，低于此值的文档将被标记为需要改进
      auto_fix: true # 是否启用自动修复（通过传递改进建议给内容生成节点）
      check_aspects: # 检查方面
         - "completeness" # 完整性：文档是否涵盖了模块的所有重要方面
         - "accuracy" # 准确性：文档中的信息是否准确
         - "readability" # 可读性：文档是否易于阅读和理解
         - "formatting" # 格式化：文档的格式是否一致和专业
         - "visualization" # 可视化：文档是否包含必要的图表或示意图
         - "code_examples" # 代码示例：是否提供了充分的代码示例
         - "practical_guidance" # 实用指导：是否提供了实用的使用指导
      # 提示模板 - 注意：该模板应只提供改进建议，不提供修复后的完整内容
      quality_check_prompt_template: |
         你是一个专业的模块文档质量评估专家，专注于评估技术文档的教学效果和实用价值。请对以下模块文档进行深入的质量评估。

         文档内容:
         {content}

         ## 📋 模块文档评估标准

         请从以下7个维度对模块文档进行评估，每个维度给出1-10分的评分：

         ### 1. 📚 完整性 (Completeness)
         - 是否涵盖了模块的所有公共API？
         - 是否包含了模块的核心功能说明？
         - 是否说明了模块的设计目的和使用场景？
         - 是否包含了依赖关系和集成信息？

         ### 2. ✅ 准确性 (Accuracy)
         - API文档是否与实际代码一致？
         - 参数类型和返回值是否正确？
         - 代码示例是否能正常运行？
         - 是否有误导性的描述？

         ### 3. 📖 可读性 (Readability)
         - 文档结构是否清晰合理？
         - 语言表达是否简洁明了？
         - 技术概念解释是否易于理解？
         - 是否有良好的逻辑流程？

         ### 4. 🎨 格式化 (Formatting)
         - Markdown语法使用是否正确？
         - 代码块格式是否规范？
         - 表格和列表是否整齐？
         - 标题层级是否合理？

         ### 5. 📊 可视化 (Visualization)
         - 是否包含必要的架构图或流程图？
         - 复杂的数据结构是否有图表说明？
         - 是否使用了Mermaid等工具增强理解？
         - 图表是否清晰易懂？

         ### 6. 💻 代码示例 (Code Examples)
         - 是否提供了充分的使用示例？
         - 示例是否覆盖了主要使用场景？
         - 代码是否完整可运行？
         - 是否包含了错误处理示例？

         ### 7. 🔧 实用指导 (Practical Guidance)
         - 是否提供了最佳实践建议？
         - 是否包含了常见问题和解决方案？
         - 是否有性能和安全相关的指导？
         - 是否便于开发者快速上手？

         ## 📝 评估输出格式

         请按以下格式提供评估结果：

         ### 评估结果
         - **完整性**: [1-10分] - [具体评价和发现的问题]
         - **准确性**: [1-10分] - [具体评价和发现的问题]
         - **可读性**: [1-10分] - [具体评价和发现的问题]
         - **格式化**: [1-10分] - [具体评价和发现的问题]
         - **可视化**: [1-10分] - [具体评价和发现的问题]
         - **代码示例**: [1-10分] - [具体评价和发现的问题]
         - **实用指导**: [1-10分] - [具体评价和发现的问题]
         - **总体评分**: [1-10分]

         ### 🔍 关键问题识别
         1. **API文档问题**: [列出API文档方面的问题]
         2. **示例代码问题**: [列出代码示例方面的问题]
         3. **结构组织问题**: [列出文档结构方面的问题]
         4. **可视化缺失**: [列出缺失的图表和可视化]

         ### 💡 具体改进建议
         1. **内容补充**: [需要补充的API文档、使用场景等]
         2. **示例改进**: [需要添加或改进的代码示例]
         3. **结构优化**: [如何改进文档结构和组织]
         4. **可视化增强**: [需要添加的图表类型和内容]
         5. **表达改进**: [如何改进技术概念的解释]
         6. **实用性提升**: [如何增强文档的实用价值]

         ### 🎯 改进优先级
         - **高优先级**: [最重要的改进项目，影响文档基本可用性]
         - **中优先级**: [重要的改进项目，提升文档质量]
         - **低优先级**: [可选的改进项目，锦上添花]

         ### 📋 具体行动建议
         - **立即修复**: [需要立即修复的错误或问题]
         - **内容增强**: [需要增加的具体内容]
         - **格式调整**: [需要调整的格式问题]
         - **示例补充**: [需要补充的具体示例]

         ## ⚠️ 评估要求

         1. **专业性**: 基于软件开发最佳实践进行评估
         2. **实用性**: 重点关注文档对开发者的实际帮助
         3. **教学性**: 评估文档的教学效果和学习价值
         4. **可操作性**: 确保改进建议具体可执行
         5. **建设性**: 提供积极的改进方向

         **重要提示**: 请只提供评估和改进建议，不要提供修复后的完整文档内容。你的建议将用于指导模块文档的重新生成。

   combine_content:
      retry_count: 3
      quality_threshold: 0.7
      consistency_check_prompt_template: |
         请检查以下技术文档内容的一致性问题，并提供修复建议。检查术语、格式、风格、链接和结构的一致性。

         以JSON格式返回结果，格式如下：
         ```json
         {
           "issues": [
             {
               "description": "问题描述",
               "location": "问题位置",
               "suggestion": "修复建议"
             }
           ]
         }
         ```

         文档内容：
         {content}

   format_output:
      output_format: "markdown"
      add_toc: true
      add_nav_links: true
      add_emojis: true
      justdoc_compatible: true
      template: |
         # {title}

         {toc}

         ## 简介

         {introduction}

         ## 系统架构

         {architecture}

         ## 核心模块

         {core_modules}

         ## 使用示例

         {examples}

         ## 常见问题

         {faq}

         ## 参考资料

         {references}

   interactive_qa:
      retry_count: 3
      quality_threshold: 0.7
      max_context_chunks: 5
      qa_prompt_template: |
         你是一个代码库专家，熟悉这个代码库的所有细节。请根据以下信息回答用户的问题。

         代码库信息:
         {code_info}

         相关上下文:
         {context}

         用户问题:
         {question}

         请提供准确、全面的回答，包括相关代码引用和解释。如果无法回答，请说明原因。

   publish:
      platforms:
         - "github"
      github_pages_branch: "gh-pages"
      github_pages_dir: "docs"
      github_pages_index: "index.md"
      github_pages_theme: "jekyll-theme-cayman"
      github_pages_title: "代码库文档"
      github_pages_description: "自动生成的代码库文档"
