Metadata-Version: 2.4
Name: codebase-knowledge-builder
Version: 0.1.1
Summary: A tool for analyzing Git repositories and generating knowledge documents
Author-email: yuanyu <lws2004@163.com>
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: pocketflow>=0.0.2
Requires-Dist: litellm>=0.13.0
Requires-Dist: langfuse>=2.1.0
Requires-Dist: gitpython>=3.1.40
Requires-Dist: pydantic>=2.10.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: tqdm>=4.66.1
Requires-Dist: requests>=2.31.0
Requires-Dist: pyyaml>=6.0.0
Provides-Extra: dev
Requires-Dist: pytest>=8.0.0; extra == "dev"
Requires-Dist: black>=24.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"

<h1 align="center">代码库知识构建器</h1>

<p align="center">
  <a href="https://github.com/The-Pocket/PocketFlow" target="_blank">
    <img
      src="./assets/banner.png" width="600"
    />
  </a>
</p>

这个项目是一个代码库知识构建工具，基于 [Pocket Flow](https://github.com/The-Pocket/PocketFlow) 框架开发，用于分析 Git 仓库并生成知识文档。

## 功能

- 分析 Git 仓库的提交历史
- 识别重要文件和贡献者
- 使用 LLM 生成历史总结
- 支持多种 LLM 提供商（OpenAI、OpenRouter、阿里百炼、火山引擎、硅基流动）

## 安装

1. 克隆仓库：

```bash
git clone https://github.com/yourusername/codebase-knowledge-builder.git
cd codebase-knowledge-builder
```

2. 确保已安装 uv：

```bash
# 使用 pip 安装 uv
pip install uv

# 或使用 curl 安装
curl -sSf https://install.python-uv.org | python3
```

3. 使用提供的脚本设置环境：

```bash
./scripts/setup.sh
```

这个脚本会使用 uv 创建虚拟环境并安装所有依赖。

### VSCode 集成

本项目包含 VSCode 配置文件，提供以下功能：

- 自动激活虚拟环境
- 代码格式化和检查设置
- 调试配置
- 常用任务快捷方式
- 推荐扩展

使用 VSCode 打开项目时，它会自动使用项目的虚拟环境。您还可以通过以下方式访问预配置的任务：

1. 按下 `Ctrl+Shift+P`（Windows/Linux）或 `Cmd+Shift+P`（macOS）
2. 输入 "Tasks: Run Task"
3. 选择要运行的任务，如 "设置环境"、"运行测试" 等

## 配置

### 环境变量配置

环境变量主要用于配置敏感信息（如 API 密钥）或需要在不同环境中覆盖的配置。

1. 复制 `.env.example` 文件为 `.env`：

```bash
cp .env.example .env
```

2. 编辑 `.env` 文件，设置必要的 API 密钥：

```
# 必需的配置
LLM_API_KEY=your_api_key_here
LANGFUSE_PUBLIC_KEY=your_public_key_here
LANGFUSE_SECRET_KEY=your_secret_key_here
```

其他配置项已在配置文件中设置默认值，只有在需要覆盖默认值时才需要在环境变量中设置。

### YAML 配置文件

项目使用 YAML 配置文件来存储默认配置，位于 `config` 目录下：

- `config/default.yml`：默认配置文件，包含所有配置项的默认值
- `config/{env}.yml`：环境特定配置文件，如 `development.yml`、`production.yml` 等

大多数配置都应该在 YAML 配置文件中设置，而不是环境变量。这样可以：

1. 集中管理配置
2. 更好地组织和分类配置
3. 支持层次结构和复杂配置
4. 便于版本控制和审查

您可以通过创建环境特定的配置文件来覆盖默认配置，例如：

```bash
cp config/default.yml config/production.yml
```

然后编辑 `config/production.yml` 文件，只修改需要覆盖的配置项。例如：

```yaml
# 生产环境配置
llm:
  model: "gpt-3.5-turbo"  # 使用更经济的模型
  temperature: 0.5        # 降低随机性

git:
  cache_ttl: 3600         # 缓存时间缩短为 1 小时
```

运行程序时，可以通过 `--env` 参数指定环境：

```bash
python main.py --repo-url https://github.com/username/repo.git --env production
```

## 使用方法

### 使用脚本运行

我们提供了几个便捷的脚本来简化常见操作：

#### 运行主程序

```bash
./scripts/run.sh https://github.com/username/repo.git [branch] [env]
```

参数说明：
- 第一个参数：Git 仓库 URL（必需）
- 第二个参数：分支名称（可选，默认为 `main`）
- 第三个参数：环境名称（可选，默认为 `default`）

例如：
```bash
./scripts/run.sh https://github.com/username/repo.git develop production
```

#### 运行所有测试

```bash
./scripts/run_tests.sh
```

#### 更新依赖

```bash
./scripts/update_deps.sh
```

#### 清理环境

```bash
./scripts/clean.sh
```

### 手动运行

如果您想手动运行程序，可以使用以下命令：

#### 直接使用主程序

```bash
source .venv/bin/activate
python main.py --repo-url https://github.com/username/repo.git --branch main --env default
```

可用的命令行参数：

- `--repo-url`：Git 仓库 URL（必需）
- `--branch`：分支名称（可选，默认使用配置文件中的 `git.default_branch`）
- `--output`：输出文件路径（可选，默认为 `history_analysis.json`）
- `--env`：环境名称（可选，默认为 `default`）

#### 分析 Git 仓库历史（测试脚本）

```bash
source .venv/bin/activate
python tests/test_analyze_history.py --repo-path /path/to/repo --max-commits 100
```

#### 运行完整流程（测试脚本）

```bash
source .venv/bin/activate
python tests/test_flow.py --repo-url https://github.com/username/repo.git --branch main
```

#### 运行所有测试

```bash
source .venv/bin/activate
python run_tests.py --all
```

## 项目结构

- `src/`: 源代码
  - `nodes/`: 节点实现
  - `utils/`: 工具类
    - `git_utils/`: Git 相关工具
    - `llm_wrapper/`: LLM 调用工具
    - `logger/`: 日志工具
- `tests/`: 测试脚本
- `docs/`: 文档
- `config/`: 配置文件
  - `default.yml`: 默认配置文件
  - `{env}.yml`: 环境特定配置文件
- `scripts/`: 便捷脚本
  - `setup.sh`: 设置环境脚本
  - `update_deps.sh`: 更新依赖脚本
  - `run_tests.sh`: 运行测试脚本
  - `run.sh`: 运行主程序脚本
  - `clean.sh`: 清理环境脚本
- `.vscode/`: VSCode 配置目录
  - `settings.json`: VSCode 设置
  - `launch.json`: 调试配置
  - `tasks.json`: 任务配置
  - `extensions.json`: 推荐扩展
- `.uv/`: uv 配置目录
  - `config.toml`: uv 配置文件
- `pyproject.toml`: 项目配置文件
- `requirements.txt`: 依赖列表
- `main.py`: 主程序入口
- `run_tests.py`: 测试运行脚本

## 贡献

欢迎提交 Pull Request 和 Issue。

## 许可证

MIT
